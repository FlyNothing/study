优化及结果[自行优化 + 查找网上排序方法]
	快速排序优化思路： 
		---A---
		1.source每次重新创建【避免】synchronized
		2.递归替换成循环
		---B---
		1.将queue替换成list或者array存储未执行的任务

						
			10以内的随机数		1K		10K		100K	1M		10M		100M
冒泡排序						5		114		13186	
选择排序						3		31		2227
插入排序						2		30		2667	
希尔排序[插入排序改进]			1		3		18		130		2101
归并排序						13		55		91		238		1836
快速排序[冒泡排序改进]			1		19		StackOverflow
								11		54		593		51291
堆排序							13		154		11186
计数排序						0		1		1		13		51		428
桶排序
基数排序
	
选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法	

https://www.jianshu.com/p/4f526ea40df4
睡眠排序，面条排序，猴子排序


未开发：
桶排序
设置固定空桶数
将数据放到对应的空桶中
将每个不为空的桶进行排序
拼接不为空的桶中的数据，得到结果



基数排序
基数排序是一种非比较性的整数排序算法，它使用整数键对数据进行排序，方法是将键分组为具有相同重要位置和值的单个数字。需要位置表示法，但由于整数可以表示字符串（例如，名称或日期）和特殊格式的浮点数，所以基数排序不限于整数。
least significant digit (LSD) 基数排序通常使用以下排序顺序：短键（长度短）在较长的键之前，而长度相同的键按字典顺序排序。这与整数表示的正常顺序一致，例如顺序1,2,3,4,5,6,7,8,9,10,11。从个位开始向高位挪动
most significant digit (MSD)基数排序使用词典顺序，这适合排序字符串，如单词或固定长度整数表示。诸如“b，c，d，e，f，g，h，i，j，ba”的序列按字典顺序排序为“b，ba，c，d，e，f，g，h，i，j ”。如果使用词典排序来对可变长度整数表示进行排序，则从1到10的数字的表示将被输出为1,10,2,3,4,5,6,7,8,9，如同较短的按键左对齐，并在右侧用空白字符填充以使短按键与最长按键一样长，以确定排序顺序。从高位向地位开始比较,MSD的方式与LSD相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中,在进行完最低位数的分配后再合并回单一的数组中

